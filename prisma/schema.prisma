generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_URI")
}

// next-auth tables
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  slug          String?   @unique
  title         String?
  description   String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  Project Project[]
  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

// logic tables
model Link {
  id               Int      @id @default(autoincrement())
  url              String
  title            String?
  description      String?
  imageUrl         String?
  projectlink      Project? @relation("projectlink")
  projectDevLinkId Project? @relation("projectDevLinkId")

  @@map(name: "links")
}

model Skill {
  id        Int            @id @default(autoincrement())
  name      String
  category  SkillCatergory @default(OTHER)
  projectId Int
  projects  Project        @relation(fields: [projectId], references: [id])

  @@map(name: "skills")
}

model Project {
  id               Int       @id @default(autoincrement())
  name             String
  description      String?
  initialDate      DateTime? @map("initial_date")
  finalDate        DateTime? @map("end_date")
  otherInfo        String?   @map("other_info")
  userId           Int       @map("userid")
  projectLinkId    Int       @map("project_link_id")
  projectDevLinkId Int       @map("project_devlink_id")
  user             User      @relation(fields: [userId], references: [id])
  projectLink      Link      @relation("projectlink", fields: [projectLinkId], references: [id])
  projectDevLink   Link      @relation("projectDevLinkId", fields: [projectDevLinkId], references: [id])
  skills           Skill[]

  // imgages
  // syncWith -- github/gitlab


  @@map(name: "projects")
}

enum SkillCatergory {
  PROG_LANG
  PROG_TECH
  OTHER
}
