generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// next-auth tables
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?       @map(name: "email_verified")
  image          String?
  slug           String?         @unique
  title          String?
  description    String?
  gitlabLink     String?         @map("gitlab_link")
  githubLink     String?         @map("github_link")
  linkedinLink   String?         @map("linkedin_link")
  twitterLink    String?         @map("twitter_link")
  phone          String?
  experience     Int?
  birthday       DateTime?
  gender         Gender?
  theme          Json            @default("{\"palette\":{\"primary\":{\"main\":\"#ff9100\"},\"secondary\":{\"main\":\"#1985ff\"},\"error\":{\"main\":\"#ff1744\"},\"type\":\"dark\"}}")
  publicProfile  Boolean         @default(false) @map(name: "public_profile")
  createdAt      DateTime        @default(now()) @map(name: "created_at")
  updatedAt      DateTime        @default(now()) @map(name: "updated_at")
  Project        Project[]
  jobPreferences JobPreferences?



  @@map(name: "users")
}

model JobPreferences {
  userId           Int      @id @default(autoincrement()) @map("user_id")
  openToWork       Boolean? @map("opent_to_work")
  openToRelocation Boolean? @map("opent_to_relocation")
  remoteAvailable  Boolean? @map("remote_availability")
  minSalary        Float?   @map("montly_min_salary")
  user             User     @relation(fields: [userId], references: [id])

  @@map(name: "job_preferences")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

// logic tables

model UserTokens {
  id          Int      @id @default(autoincrement())
  userId      Int      @map(name: "user_id")
  provider    Provider
  accessToken String   @map(name: "access_token")

  @@unique([userId, provider])
  @@map(name: "user_tokens")
}

model Skill {
  id       Int             @id @default(autoincrement())
  name     String
  category SkillCatergory  @default(OTHER)
  projects ProjectSkills[]

  @@unique([name, category])
  @@map(name: "skills")
}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  projectId Int?
  Project   Project? @relation(fields: [projectId], references: [id])

  @@map(name: "images")
}

model Project {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  initialDate    DateTime?       @map("initial_date")
  finalDate      DateTime?       @map("end_date")
  otherInfo      String?         @map("other_info")
  userId         Int             @map("userid")
  projectLink    String?         @map("project_link")
  projectDevLink String?         @map("project_devlink")
  logoUrl        String?         @map("url_logo")
  publicProject  Boolean         @default(true) @map(name: "public_project")
  user           User            @relation(fields: [userId], references: [id])
  skills         ProjectSkills[]
  images         Image[]
  collaborators  Collaborator[]
  projectSlug    String          @map("project_slug")

  @@map(name: "projects")
}

model ProjectSkills {
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  skill     Skill   @relation(fields: [skillId], references: [id])
  skillId   Int

  @@id([projectId, skillId])
  @@map(name: "project_skills")
}

model Collaborator {
  id        Int     @id @default(autoincrement())
  login     String
  avatarUrl String?
  email     String?
  bio       String?
  name      String?
  url       String?
  isOwner   Boolean @map("is_owner")
  projectId Int     @map("projectid")
  project   Project @relation(fields: [projectId], references: [id])

  @@map(name: "collaborators")
}

enum SkillCatergory {
  PROG_LANG
  PROG_TECH
  OTHER
}

enum Provider {
  github
  gitlab
  linkedIn
}

enum Gender {
  male
  female
}
